exit
Array.new(5)
exit
a
a.map!.with_index {|ele| ele+1}
a= [1,2,3]
[1,2,3].map!.with_index {|ele| ele+1}
[1,2,3].map.with_index {|ele| ele+1}
[1,2,3].map.with_index! {|ele|ele+1}
exit
Array.new(2) {Array.new(5) }
Array.new(10) {Array.new(5) }
Array.new(10,5)
Array.new(10)
Array.new {Array.new(3,5)}
Array.new {Array.new(3)}
Array.new(nil) {Array.new([])}
Array.new {Array.new([])}
exit
flat += [a]
a=3
flat += [3]
flat +=3
flat = []
exit
p [1,2,3].my_each {|n| puts n}
end
  end
    end
      
      i+=1
      prc.call(self[i])
    while i<self.length 
    i=0
  def my_each(&prc)
class Array
p [1,2,3].my_each {|n| puts n}
end
  puts num
end.my_each do |num|
  puts num
return_value = [1, 2, 3].my_each do |num|
end
  end
    end
      
      prc.call(self[i])
      i+=1
    while i<self.length 
    i=0
  def my_each(&prc)
class Array
exit
end
  end
    prc.call(self[i])
    i+=1
  while i<self.length 
  i=0
def my_each(&prc)
Class Array
my_each
p return_value
end
  puts num
end.my_each do |num|
  puts num
return_value = [1, 2, 3].my_each do |num|
end
  end
    prc.call(self[i])
    i+=1
  while i<self.length 
  i=0
def my_each(&prc)
Class Array
end
  puts num
end.my_each do |num|
  puts num
return_value = [1, 2, 3].my_each do |num|
10.fdiv(5)
exit
4.is_a?(Float)
4.8.is_a?(Int)
4.8.is_a?(Float)
exit
24/5.to_f
exit
(0...1).each{|ele| p ele}
(0...0).each{|ele| p ele}
exit
charhash
charhash["a"].push(99)
hash["a"].push(99)
charhash = Hash.new{|h,k| h[k]=[]}
charhash = Hash.new(|h,k|h[k]=[])
x
x[0].push(99)
x[a].push(99)
x
x["a"].push(99)
x
x = Hash.new([])
charhash = Hash.new(10,{})
charhash = Hash.new(10,{[]})
charhash = Hash.new({[]})
charhash
charhash["a"] =charhash["a"] << 2
charhash["a"] =charhas["a"] << 2
charhash
charhash["a"] +=3
